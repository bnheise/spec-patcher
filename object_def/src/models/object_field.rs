/*
 * Object
 *
 * A Java client JAR is available for use with the group ID 'com.liferay', artifact ID 'com.liferay.object.admin.rest.client', and version '1.0.61'.
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ObjectField {
    #[serde(rename = "DBType", skip_serializing_if = "Option::is_none")]
    pub db_type: Option<DbType>,
    #[serde(rename = "actions", skip_serializing_if = "Option::is_none")]
    pub actions: Option<::std::collections::HashMap<String, ::std::collections::HashMap<String, String>>>,
    #[serde(rename = "businessType", skip_serializing_if = "Option::is_none")]
    pub business_type: Option<BusinessType>,
    #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
    pub default_value: Option<String>,
    #[serde(rename = "externalReferenceCode", skip_serializing_if = "Option::is_none")]
    pub external_reference_code: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "indexed", skip_serializing_if = "Option::is_none")]
    pub indexed: Option<bool>,
    #[serde(rename = "indexedAsKeyword", skip_serializing_if = "Option::is_none")]
    pub indexed_as_keyword: Option<bool>,
    #[serde(rename = "indexedLanguageId", skip_serializing_if = "Option::is_none")]
    pub indexed_language_id: Option<String>,
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "listTypeDefinitionExternalReferenceCode", skip_serializing_if = "Option::is_none")]
    pub list_type_definition_external_reference_code: Option<String>,
    #[serde(rename = "listTypeDefinitionId", skip_serializing_if = "Option::is_none")]
    pub list_type_definition_id: Option<i64>,
    #[serde(rename = "localized", skip_serializing_if = "Option::is_none")]
    pub localized: Option<bool>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "objectFieldSettings", skip_serializing_if = "Option::is_none")]
    pub object_field_settings: Option<Vec<crate::models::ObjectFieldSetting>>,
    #[serde(rename = "readOnly", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<ReadOnly>,
    #[serde(rename = "readOnlyConditionExpression", skip_serializing_if = "Option::is_none")]
    pub read_only_condition_expression: Option<String>,
    #[serde(rename = "relationshipType", skip_serializing_if = "Option::is_none")]
    pub relationship_type: Option<RelationshipType>,
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<bool>,
    #[serde(rename = "system", skip_serializing_if = "Option::is_none")]
    pub system: Option<bool>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "x-class-name", skip_serializing_if = "Option::is_none")]
    pub x_class_name: Option<String>,
}

impl ObjectField {
    pub fn new() -> ObjectField {
        ObjectField {
            db_type: None,
            actions: None,
            business_type: None,
            default_value: None,
            external_reference_code: None,
            id: None,
            indexed: None,
            indexed_as_keyword: None,
            indexed_language_id: None,
            label: None,
            list_type_definition_external_reference_code: None,
            list_type_definition_id: None,
            localized: None,
            name: None,
            object_field_settings: None,
            read_only: None,
            read_only_condition_expression: None,
            relationship_type: None,
            required: None,
            state: None,
            system: None,
            r#type: None,
            x_class_name: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DbType {
    #[serde(rename = "BigDecimal")]
    BigDecimal,
    #[serde(rename = "Boolean")]
    Boolean,
    #[serde(rename = "Clob")]
    Clob,
    #[serde(rename = "Date")]
    Date,
    #[serde(rename = "DateTime")]
    DateTime,
    #[serde(rename = "Double")]
    Double,
    #[serde(rename = "Integer")]
    Integer,
    #[serde(rename = "Long")]
    Long,
    #[serde(rename = "String")]
    String,
}

impl Default for DbType {
    fn default() -> DbType {
        Self::BigDecimal
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BusinessType {
    #[serde(rename = "Aggregation")]
    Aggregation,
    #[serde(rename = "Attachment")]
    Attachment,
    #[serde(rename = "Boolean")]
    Boolean,
    #[serde(rename = "Date")]
    Date,
    #[serde(rename = "DateTime")]
    DateTime,
    #[serde(rename = "Decimal")]
    Decimal,
    #[serde(rename = "Encrypted")]
    Encrypted,
    #[serde(rename = "Formula")]
    Formula,
    #[serde(rename = "Integer")]
    Integer,
    #[serde(rename = "LongInteger")]
    LongInteger,
    #[serde(rename = "LongText")]
    LongText,
    #[serde(rename = "MultiselectPicklist")]
    MultiselectPicklist,
    #[serde(rename = "Picklist")]
    Picklist,
    #[serde(rename = "PrecisionDecimal")]
    PrecisionDecimal,
    #[serde(rename = "Relationship")]
    Relationship,
    #[serde(rename = "RichText")]
    RichText,
    #[serde(rename = "Text")]
    Text,
}

impl Default for BusinessType {
    fn default() -> BusinessType {
        Self::Aggregation
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReadOnly {
    #[serde(rename = "conditional")]
    Conditional,
    #[serde(rename = "false")]
    False,
    #[serde(rename = "true")]
    True,
}

impl Default for ReadOnly {
    fn default() -> ReadOnly {
        Self::Conditional
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RelationshipType {
    #[serde(rename = "oneToMany")]
    OneToMany,
    #[serde(rename = "oneToOne")]
    OneToOne,
}

impl Default for RelationshipType {
    fn default() -> RelationshipType {
        Self::OneToMany
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "BigDecimal")]
    BigDecimal,
    #[serde(rename = "Boolean")]
    Boolean,
    #[serde(rename = "Clob")]
    Clob,
    #[serde(rename = "Date")]
    Date,
    #[serde(rename = "DateTime")]
    DateTime,
    #[serde(rename = "Double")]
    Double,
    #[serde(rename = "Integer")]
    Integer,
    #[serde(rename = "Long")]
    Long,
    #[serde(rename = "String")]
    String,
}

impl Default for Type {
    fn default() -> Type {
        Self::BigDecimal
    }
}

